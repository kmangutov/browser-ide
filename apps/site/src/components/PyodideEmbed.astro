---
const { code } = Astro.props;
const baseUrl = import.meta.env.BASE_URL;
// Ensure baseUrl ends with a slash
const basePath = baseUrl.endsWith('/') ? baseUrl : `${baseUrl}/`;
---

<div class="pyodide-embed">
  <div class="code-editor" id="codeEditor"></div>
  <div class="controls">
    <button id="runButton">Run Code</button>
  </div>
  <div class="output-container">
    <div id="output" class="output"></div>
  </div>
</div>

<!-- CodeMirror CSS -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/codemirror.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/theme/monokai.min.css">

<style>
  .pyodide-embed {
    margin: 2rem 0;
    border: 1px solid #e0e0e0;
    border-radius: 6px;
    overflow: hidden;
  }
  
  .code-editor {
    /* Remove padding so CodeMirror handles it */
    background-color: #282c34;
  }
  
  /* CodeMirror specific styles */
  :global(.CodeMirror) {
    height: auto;
    max-height: 400px;
    border: none;
    font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
    font-size: 14px;
    line-height: 1.5;
  }
  
  /* Fix for line numbers */
  :global(.CodeMirror-gutter) {
    background-color: #21252b;
    border-right: 1px solid #181a1f;
  }
  
  :global(.CodeMirror-linenumber) {
    color: #636d83;
  }
  
  .controls {
    padding: 0.5rem;
    background-color: #f8f9fa;
    border-bottom: 1px solid #e0e0e0;
  }
  
  #runButton {
    background-color: #3498db;
    color: white;
    border: none;
    padding: 8px 16px;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
    transition: background-color 0.2s;
  }
  
  #runButton:hover {
    background-color: #2980b9;
  }
  
  #runButton:disabled {
    background-color: #95a5a6;
    cursor: not-allowed;
  }
  
  .output-container {
    padding: 1rem;
    background-color: #f8f9fa;
    border-top: 1px solid #e0e0e0;
    min-height: 100px;
  }
  
  .output {
    font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
    font-size: 14px;
    white-space: pre-wrap;
  }
  
  .error {
    color: #e74c3c;
    font-weight: bold;
  }
  
  .warning {
    color: #f39c12;
    font-weight: bold;
  }
  
  .note {
    margin-top: 1rem;
    padding: 0.5rem;
    background-color: #edf2f7;
    border-left: 4px solid #3498db;
    font-size: 0.9rem;
  }
</style>

<script src={`${basePath}js/pyodide-loader.js`} type="module"></script>

<script>
  // First, load all necessary CodeMirror scripts
  const loadScripts = async () => {
    // Load scripts in sequence to ensure proper dependency order
    const scriptUrls = [
      "https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/codemirror.min.js",
      "https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/mode/python/python.min.js",
      "https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/addon/edit/matchbrackets.min.js",
      "https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/addon/edit/closebrackets.min.js"
    ];
    
    for (const url of scriptUrls) {
      await new Promise((resolve, reject) => {
        const script = document.createElement('script');
        script.src = url;
        script.onload = resolve;
        script.onerror = reject;
        document.head.appendChild(script);
      });
    }
  };
  
  // Initialize the CodeMirror editor
  const initCodeEditor = (code) => {
    const editor = CodeMirror(document.getElementById('codeEditor'), {
      value: code,
      mode: 'python',
      theme: 'monokai',
      lineNumbers: true,
      indentUnit: 4,
      lineWrapping: true,
      matchBrackets: true,
      autoCloseBrackets: true,
      viewportMargin: Infinity,
      gutters: ["CodeMirror-linenumbers"],
      readOnly: false,
      lineNumberFormatter: function(line) {
        return line;
      },
      extraKeys: {
        "Tab": function(cm) {
          cm.replaceSelection("    ", "end");
        }
      }
    });
    
    // Refresh to ensure proper rendering
    setTimeout(() => {
      editor.refresh();
    }, 100);
    
    return editor;
  };
  
  // Initialize Pyodide
  let pyodideReadyPromise;
  
  function initializePyodide() {
    if (!pyodideReadyPromise) {
      pyodideReadyPromise = (async function() {
        // Add the Pyodide script
        if (!window.loadPyodide) {
          const script = document.createElement('script');
          script.src = "https://cdn.jsdelivr.net/pyodide/v0.25.0/full/pyodide.js";
          document.head.appendChild(script);
          await new Promise(resolve => script.onload = resolve);
        }
        
        console.log("Loading Pyodide...");
        const pyodide = await window.loadPyodide();
        console.log("Pyodide loaded successfully!");
        
        // Load required packages
        console.log("Loading scikit-learn, numpy, and pandas...");
        await pyodide.loadPackage(["scikit-learn", "numpy", "pandas"]);
        console.log("ML packages loaded successfully!");
        
        return pyodide;
      })();
    }
    return pyodideReadyPromise;
  }
  
  document.addEventListener('DOMContentLoaded', async () => {
    const containers = document.querySelectorAll('.pyodide-embed');
    
    // Make sure all scripts are properly loaded
    await loadScripts();
    
    // Now the global CodeMirror object should be available
    containers.forEach((container) => {
      // Use dataset to get the code value from the server component
      const initialCode = '{code}';
      const editor = initCodeEditor(initialCode);
      
      const runButton = container.querySelector('#runButton');
      const output = container.querySelector('#output');
      
      // Start loading Pyodide
      let pyodidePromise = initializePyodide();
      output.innerText = "Python environment loading...";
      
      // Set up the run button
      runButton.addEventListener('click', async () => {
        runButton.disabled = true;
        output.innerText = "Running...";
        
        try {
          const pyodide = await pyodidePromise;
          const userCode = editor.getValue();
          
          let capturedOutput = "";
          pyodide.setStdout({
            write: (text) => {
              capturedOutput += text;
              output.innerText = capturedOutput;
            }
          });
          
          pyodide.setStderr({
            write: (text) => {
              capturedOutput += `\nError: ${text}`;
              output.innerText = capturedOutput;
            }
          });
          
          capturedOutput = "";
          const result = await pyodide.runPythonAsync(userCode);
          
          if (result && typeof result === 'object' && 'error' in result) {
            output.innerHTML = `<span class="error">Error: ${result.error}</span>`;
          } 
          else if (result !== undefined && result !== null && capturedOutput === "") {
            if (typeof result === 'object') {
              output.innerText = JSON.stringify(result, null, 2);
            } else {
              output.innerText = String(result);
            }
          }
          
        } catch (error) {
          output.innerHTML = `<span class="error">Error: ${error.message || String(error)}</span>`;
          console.error("Python execution error:", error);
        } finally {
          runButton.disabled = false;
        }
      });
      
      // Check if Pyodide is loaded when visible
      const observer = new IntersectionObserver((entries) => {
        if (entries[0].isIntersecting) {
          pyodidePromise.then(() => {
            output.innerText = "Python environment ready. Click 'Run Code' to execute.";
          }).catch(error => {
            output.innerText = `Error loading Python: ${error.message}`;
          });
          observer.disconnect();
        }
      });
      
      observer.observe(container);
    });
  });
</script> 