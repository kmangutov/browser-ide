---
const { code } = Astro.props;
// Generate a unique ID for this component instance
const uniqueId = `pyodide_${Math.random().toString(36).substr(2, 9)}`;
const baseUrl = import.meta.env.BASE_URL;
// Ensure baseUrl ends with a slash
const basePath = baseUrl.endsWith('/') ? baseUrl : `${baseUrl}/`;
---

<div class="pyodide-embed" data-component-id={uniqueId} data-code={code}>
  <div class="code-editor" id={`codeEditor_${uniqueId}`}></div>
  <div class="controls">
    <button class="run-button">Run Animation</button>
    <button class="pause-button" disabled>Pause</button>
    <button class="reset-button" disabled>Reset</button>
  </div>
  <div class="visualization-container">
    <img class="output-canvas" id={`outputCanvas_${uniqueId}`} width="800" height="500">
  </div>
  <div class="output-container">
    <div class="output-text"></div>
  </div>
</div>

<!-- Add a meta tag for base URL detection -->
<meta name="base-url" content={basePath} />

<!-- CodeMirror CSS -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/codemirror.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/theme/monokai.min.css">

<style>
  .pyodide-embed {
    margin: 2rem 0;
    border: 1px solid #e0e0e0;
    border-radius: 6px;
    overflow: hidden;
  }
  
  .code-editor {
    background-color: #282c34;
  }
  
  /* CodeMirror specific styles */
  :global(.CodeMirror) {
    height: auto;
    max-height: 400px;
    border: none;
    font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
    font-size: 14px;
    line-height: 1.5;
  }
  
  /* Fix for line numbers */
  :global(.CodeMirror-gutter) {
    background-color: #21252b;
    border-right: 1px solid #181a1f;
  }
  
  :global(.CodeMirror-linenumber) {
    color: #636d83;
  }
  
  .controls {
    padding: 0.5rem;
    background-color: #f8f9fa;
    border-bottom: 1px solid #e0e0e0;
    display: flex;
    gap: 8px;
  }
  
  .visualization-container {
    padding: 1rem;
    text-align: center;
    background-color: white;
  }
  
  .output-canvas {
    max-width: 100%;
    height: auto;
    border: 1px solid #e0e0e0;
    background-color: white;
  }
  
  button {
    background-color: #3498db;
    color: white;
    border: none;
    padding: 8px 16px;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
    transition: background-color 0.2s;
  }
  
  button:hover:not(:disabled) {
    background-color: #2980b9;
  }
  
  button:disabled {
    background-color: #95a5a6;
    cursor: not-allowed;
  }
  
  .output-container {
    padding: 1rem;
    background-color: #f8f9fa;
    border-top: 1px solid #e0e0e0;
    min-height: 50px;
  }
  
  .output-text {
    font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
    font-size: 14px;
    white-space: pre-wrap;
  }
  
  .error {
    color: #e74c3c;
    font-weight: bold;
  }
  
  .warning {
    color: #f39c12;
    font-weight: bold;
  }
</style>

<!-- Import the Web Worker manager and CodeMirror -->
<script src={`${basePath}js/pyodide-loader.js`} type="module" data-base-path={basePath}></script>
<script>
  (function() {
    // Initialize components when ready
    async function initializeComponents() {
      try {
        // Import functions from the loader
        const { loadCodeMirror, createPyodideManager } = await import(`${document.currentScript.getAttribute('data-base-path') || '/'}js/pyodide-loader.js`);
        
        // Wait for scripts to load first
        await loadCodeMirror();
        
        // Initialize each PyodideEmbed container
        const containers = document.querySelectorAll('.pyodide-embed');
        
        containers.forEach(async (container) => {
          const componentId = container.dataset.componentId;
          const initialCode = container.dataset.code;
          
          // Get the elements for this container
          const codeEditor = document.getElementById(`codeEditor_${componentId}`);
          const runButton = container.querySelector('.run-button');
          const pauseButton = container.querySelector('.pause-button');
          const resetButton = container.querySelector('.reset-button');
          const output = container.querySelector('.output-text');
          const canvas = container.querySelector(`.output-canvas`);
          
          // Initialize CodeMirror
          const editor = CodeMirror(codeEditor, {
            value: initialCode,
            mode: 'python',
            theme: 'monokai',
            lineNumbers: true,
            indentUnit: 4,
            lineWrapping: true,
            matchBrackets: true,
            autoCloseBrackets: true,
            viewportMargin: Infinity,
            gutters: ["CodeMirror-linenumbers"],
            readOnly: false,
            extraKeys: {
              "Tab": function(cm) {
                cm.replaceSelection("    ", "end");
              }
            }
          });
          
          // Refresh to ensure proper rendering
          setTimeout(() => {
            editor.refresh();
          }, 100);
          
          // Create a Pyodide manager instance
          const pyodideManager = await createPyodideManager({
            packages: ['matplotlib', 'numpy'],
            targetFps: 30  // Limit frame rate for better performance
          });
          
          // Set up event handlers for PyodideManager events
          
          // Output events
          pyodideManager.on('output', (data) => {
            output.textContent += data.output;
            
            // Auto-scroll to bottom
            if (output.parentElement) {
              output.parentElement.scrollTop = output.parentElement.scrollHeight;
            }
          });
          
          // Error events
          pyodideManager.on('error', (data) => {
            output.innerHTML += `<span class="error">${data.error}</span>\n`;
            
            // Re-enable run button on error
            runButton.disabled = false;
            pauseButton.disabled = true;
            resetButton.disabled = true;
          });
          
          // Animation frame updates
          pyodideManager.on('frame', (data) => {
            canvas.src = data.imageData;
            
            // If this is the last frame, update UI accordingly
            if (data.isLastFrame) {
              output.textContent += '\nAnimation complete.';
              runButton.disabled = false;
            }
          });
          
          // Animation status events
          pyodideManager.on('animationStarted', () => {
            pauseButton.textContent = 'Pause';
            pauseButton.disabled = false;
            resetButton.disabled = false;
          });
          
          pyodideManager.on('animationPaused', () => {
            pauseButton.textContent = 'Resume';
          });
          
          pyodideManager.on('animationResumed', () => {
            pauseButton.textContent = 'Pause';
          });
          
          pyodideManager.on('animationCompleted', () => {
            runButton.disabled = false;
            pauseButton.disabled = true;
            resetButton.disabled = false;
            pauseButton.textContent = 'Pause';
          });
          
          // Status updates
          pyodideManager.on('status', (data) => {
            if (data.status === 'loading') {
              output.textContent = 'Python environment loading...';
            } else if (data.status === 'ready') {
              output.textContent = 'Python environment ready. Click "Run Animation" to execute.';
            }
          });
          
          // Static image updates (for non-animation results)
          pyodideManager.on('image', (data) => {
            canvas.src = data.imageData;
          });
          
          // Initialize with status message
          output.textContent = 'Python environment loading...';
          
          // Setup animation controls
          pauseButton.addEventListener('click', async () => {
            if (pauseButton.textContent === 'Pause') {
              await pyodideManager.pauseAnimation();
            } else {
              await pyodideManager.resumeAnimation();
            }
          });
          
          resetButton.addEventListener('click', async () => {
            // Reset the animation
            await pyodideManager.stopAnimation();
            
            // Clear the canvas
            canvas.src = '';
            
            // Reset button states
            pauseButton.disabled = true;
            pauseButton.textContent = 'Pause';
            runButton.disabled = false;
            
            output.textContent = 'Animation reset. Click "Run Animation" to start again.';
          });
          
          // Set up the run button
          runButton.addEventListener('click', async () => {
            try {
              // Start by disabling the run button
              runButton.disabled = true;
              output.textContent = 'Running...';
              
              // Get the code from CodeMirror
              const userCode = editor.getValue();
              
              // Run the code in the worker
              const result = await pyodideManager.runCode(userCode);
              
              // If the code defines an animation, start it
              if (result.hasAnimation) {
                await pyodideManager.startAnimation();
                output.textContent = 'Animation running...';
              }
              else {
                // If not an animation, re-enable the run button
                runButton.disabled = false;
              }
            } catch (error) {
              output.innerHTML = `<span class="error">Error: ${error.message || String(error)}</span>`;
              console.error("Execution error:", error);
              
              // Re-enable the run button on error
              runButton.disabled = false;
            }
          });
          
          // Initialize PyodideManager when the component is visible
          const observer = new IntersectionObserver((entries) => {
            if (entries[0].isIntersecting) {
              pyodideManager.initialize().then(() => {
                output.textContent = 'Python environment ready. Click "Run Animation" to execute.';
              }).catch(error => {
                output.innerHTML = `<span class="error">Error loading Python: ${error.message}</span>`;
                console.error("Failed to initialize Pyodide:", error);
              });
              
              observer.disconnect();
            }
          });
          
          observer.observe(container);
          
          // Clean up on page unload
          window.addEventListener('beforeunload', () => {
            pyodideManager.terminate();
          });
        });
      } catch (error) {
        console.error("Failed to initialize PyodideMatplotlib:", error);
        document.querySelectorAll('.pyodide-embed .output-text').forEach(output => {
          output.innerHTML = `<span class="error">Error loading component: ${error.message}</span>`;
        });
      }
    }

    // Initialize when DOM is loaded
    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", initializeComponents);
    } else {
      initializeComponents();
    }
    
    // Also initialize when window fully loads (backup)
    window.addEventListener("load", initializeComponents);
  })();
</script> 