---
// Get the requested code or use a default
const {
  code = "print('Hello from Matplotlib!')",
  height = "300px",
  fileName = "animation.py",
  readOnly = false
} = Astro.props;

// Generate a simple unique ID for this component instance
const uniqueId = Math.random().toString(36).substring(2, 11);
---

<div class="pyodide-matplotlib-component">
  <div class="editor-container" style={`height: ${height}`}>
    <div class="code-editor" id={`code-editor-${uniqueId}`}></div>
  </div>
  
  <div class="animation-controls">
    <div class="button-container">
      <button class="run-button">▶️ Run</button>
      <button class="pause-button" disabled>⏸️ Pause</button>
      <button class="resume-button" disabled>⏯️ Resume</button>
      <button class="stop-button" disabled>⏹️ Stop</button>
    </div>
    <div class="status">Ready</div>
  </div>
  
  <div class="visualization-container" style={`height: ${height}`}>
    <div class="canvas-container">
      <canvas></canvas>
    </div>
    <div class="output-container">
      <pre class="output"></pre>
      <pre class="error"></pre>
    </div>
  </div>
</div>

<!-- Import the Web Worker manager and CodeMirror -->
<script define:vars={{ 
  basePath: import.meta.env.BASE_URL || '', 
  initialCode: code, 
  isReadOnly: readOnly, 
  elementId: `code-editor-${uniqueId}` 
}}>
  // Create and load the pyodide-loader script
  const scriptPath = `${basePath}/js/pyodide-loader.js`;
  const loaderScript = document.createElement('script');
  loaderScript.src = scriptPath;
  loaderScript.type = "module";
  loaderScript.setAttribute('data-base-path', basePath);
  document.head.appendChild(loaderScript);
  
  (function() {
    // Initialize components when ready
    document.addEventListener('DOMContentLoaded', async function() {
      const component = document.currentScript.previousElementSibling;
      const editorContainer = document.getElementById(elementId);
      const canvasContainer = component.querySelector('.canvas-container');
      const outputContainer = component.querySelector('.output');
      const errorContainer = component.querySelector('.error');
      const statusIndicator = component.querySelector('.status');
      const runButton = component.querySelector('.run-button');
      const pauseButton = component.querySelector('.pause-button');
      const resumeButton = component.querySelector('.resume-button');
      const stopButton = component.querySelector('.stop-button');
      
      // Wait for the loader script to be loaded
      let moduleReady = false;
      const checkModule = async () => {
        try {
          // Try to import the module
          const module = await import(scriptPath);
          return module;
        } catch (e) {
          // Module not ready yet, wait and try again
          await new Promise(resolve => setTimeout(resolve, 100));
          return checkModule();
        }
      };
      
      // Load required modules
      const pyodideLoader = await checkModule();
      const { loadCodeMirror, createEditor, createPyodideManager } = pyodideLoader;
      await loadCodeMirror();
      
      // Initialize CodeMirror
      const editor = createEditor(editorContainer, initialCode, { readOnly: isReadOnly });
      
      // Create a unique ID for this animation instance
      const animationId = elementId;
      
      // Initialize Pyodide manager
      const pyodideManager = await createPyodideManager({
        canvasElement: canvasContainer.querySelector('canvas')
      });
      
      // Set up event handlers
      runButton.addEventListener('click', async () => {
        // Clear previous output and errors
        outputContainer.textContent = '';
        errorContainer.textContent = '';
        
        // Disable run button, enable stop button
        runButton.disabled = true;
        stopButton.disabled = false;
        pauseButton.disabled = false;
        
        // Update status
        statusIndicator.textContent = 'Running...';
        
        try {
          // Set up print capture
          pyodideManager.setOutputCallback((output) => {
            outputContainer.textContent += output + '\n';
          });
          
          // Set up error capture
          pyodideManager.setErrorCallback((error) => {
            errorContainer.textContent = error;
            // Enable run button, disable others
            runButton.disabled = false;
            pauseButton.disabled = true;
            resumeButton.disabled = true;
            stopButton.disabled = true;
            // Update status
            statusIndicator.textContent = 'Error';
          });
          
          // Run the animation
          await pyodideManager.runAnimation(editor.getValue(), animationId);
          
          // Update status for animation
          statusIndicator.textContent = 'Animating...';
          
          // Set up animation status callbacks
          pyodideManager.setAnimationEndCallback(() => {
            // Animation complete
            runButton.disabled = false;
            pauseButton.disabled = true;
            resumeButton.disabled = true;
            stopButton.disabled = true;
            statusIndicator.textContent = 'Completed';
          });
        } catch (error) {
          // Handle initialization errors
          errorContainer.textContent = error.toString();
          runButton.disabled = false;
          pauseButton.disabled = true;
          resumeButton.disabled = true;
          stopButton.disabled = true;
          statusIndicator.textContent = 'Error';
        }
      });
      
      pauseButton.addEventListener('click', () => {
        pyodideManager.pauseAnimation();
        pauseButton.disabled = true;
        resumeButton.disabled = false;
        statusIndicator.textContent = 'Paused';
      });
      
      resumeButton.addEventListener('click', () => {
        pyodideManager.resumeAnimation();
        pauseButton.disabled = false;
        resumeButton.disabled = true;
        statusIndicator.textContent = 'Animating...';
      });
      
      stopButton.addEventListener('click', () => {
        pyodideManager.stopAnimation();
        runButton.disabled = false;
        pauseButton.disabled = true;
        resumeButton.disabled = true;
        stopButton.disabled = true;
        statusIndicator.textContent = 'Stopped';
      });
    });
  })();
</script>

<style>
  .pyodide-matplotlib-component {
    display: flex;
    flex-direction: column;
    border: 1px solid #ccc;
    border-radius: 4px;
    overflow: hidden;
    margin: 20px 0;
    font-family: sans-serif;
  }
  
  .editor-container {
    overflow: hidden;
    border-bottom: 1px solid #ccc;
  }
  
  .code-editor {
    height: 100%;
    overflow: auto;
  }
  
  .animation-controls {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 8px;
    background-color: #f5f5f5;
    border-bottom: 1px solid #ccc;
  }
  
  .button-container {
    display: flex;
    gap: 8px;
  }
  
  .animation-controls button {
    padding: 5px 10px;
    border: 1px solid #ccc;
    background-color: white;
    border-radius: 4px;
    cursor: pointer;
  }
  
  .animation-controls button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
  
  .animation-controls button:hover:not(:disabled) {
    background-color: #f0f0f0;
  }
  
  .status {
    font-size: 14px;
    color: #555;
  }
  
  .visualization-container {
    display: flex;
    flex-direction: column;
  }
  
  .canvas-container {
    flex: 1;
    min-height: 200px;
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: white;
  }
  
  .canvas-container canvas {
    max-width: 100%;
    max-height: 100%;
  }
  
  .output-container {
    min-height: 20px;
    max-height: 100px;
    overflow: auto;
    padding: 8px;
    background-color: #f9f9f9;
    border-top: 1px solid #ccc;
    font-family: monospace;
    font-size: 14px;
  }
  
  .output {
    margin: 0;
    color: #333;
  }
  
  .error {
    margin: 0;
    color: #d93025;
  }
  
  /* Add CodeMirror theme (will be loaded automatically) */
  :global(.cm-s-monokai.CodeMirror) {
    background-color: #272822;
    color: #f8f8f2;
  }
  
  :global(.cm-s-monokai .CodeMirror-gutters) {
    background-color: #272822;
    border-right: 0;
  }
  
  :global(.cm-s-monokai .CodeMirror-linenumber) {
    color: #d0d0d0;
  }
</style> 