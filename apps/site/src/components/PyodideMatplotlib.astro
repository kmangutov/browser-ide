---
const { code } = Astro.props;
// Generate a unique ID for this component instance
const uniqueId = `pyodide_${Math.random().toString(36).substr(2, 9)}`;
const baseUrl = import.meta.env.BASE_URL;
// Ensure baseUrl ends with a slash
const basePath = baseUrl.endsWith('/') ? baseUrl : `${baseUrl}/`;
---

<div class="pyodide-embed" data-component-id={uniqueId} data-code={code}>
  <div class="code-editor" id={`codeEditor_${uniqueId}`}></div>
  <div class="controls">
    <button class="run-button">Run Animation</button>
    <button class="pause-button" disabled>Pause</button>
    <button class="reset-button" disabled>Reset</button>
  </div>
  <div class="visualization-container">
    <img class="output-canvas" id={`outputCanvas_${uniqueId}`} width="800" height="500">
  </div>
  <div class="output-container">
    <div class="output-text"></div>
  </div>
</div>

<!-- CodeMirror CSS -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/codemirror.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/theme/monokai.min.css">

<style>
  .pyodide-embed {
    margin: 2rem 0;
    border: 1px solid #e0e0e0;
    border-radius: 6px;
    overflow: hidden;
  }
  
  .code-editor {
    background-color: #282c34;
  }
  
  /* CodeMirror specific styles */
  :global(.CodeMirror) {
    height: auto;
    max-height: 400px;
    border: none;
    font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
    font-size: 14px;
    line-height: 1.5;
  }
  
  /* Fix for line numbers */
  :global(.CodeMirror-gutter) {
    background-color: #21252b;
    border-right: 1px solid #181a1f;
  }
  
  :global(.CodeMirror-linenumber) {
    color: #636d83;
  }
  
  .controls {
    padding: 0.5rem;
    background-color: #f8f9fa;
    border-bottom: 1px solid #e0e0e0;
    display: flex;
    gap: 8px;
  }
  
  .visualization-container {
    padding: 1rem;
    text-align: center;
    background-color: white;
  }
  
  .output-canvas {
    max-width: 100%;
    height: auto;
    border: 1px solid #e0e0e0;
    background-color: white;
  }
  
  button {
    background-color: #3498db;
    color: white;
    border: none;
    padding: 8px 16px;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
    transition: background-color 0.2s;
  }
  
  button:hover:not(:disabled) {
    background-color: #2980b9;
  }
  
  button:disabled {
    background-color: #95a5a6;
    cursor: not-allowed;
  }
  
  .output-container {
    padding: 1rem;
    background-color: #f8f9fa;
    border-top: 1px solid #e0e0e0;
    min-height: 50px;
  }
  
  .output-text {
    font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
    font-size: 14px;
    white-space: pre-wrap;
  }
  
  .error {
    color: #e74c3c;
    font-weight: bold;
  }
  
  .warning {
    color: #f39c12;
    font-weight: bold;
  }
</style>

<script src={`${basePath}js/pyodide-loader.js`} type="module"></script>
<script>
  (function() {
    // Load all necessary CodeMirror scripts
    const loadScripts = async () => {
      const scriptUrls = [
        "https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/codemirror.min.js",
        "https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/mode/python/python.min.js",
        "https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/addon/edit/matchbrackets.min.js",
        "https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/addon/edit/closebrackets.min.js"
      ];
      
      for (const url of scriptUrls) {
        await new Promise((resolve, reject) => {
          const script = document.createElement('script');
          script.src = url;
          script.onload = resolve;
          script.onerror = reject;
          document.head.appendChild(script);
        });
      }
    };

    // Initialize the CodeMirror editor
    const initCodeMirror = (container, uniqueId) => {
      const editorElement = document.getElementById(`codeEditor_${uniqueId}`);
      const initialCode = container.dataset.code;
      
      const editor = CodeMirror(editorElement, {
        value: initialCode,
        mode: 'python',
        theme: 'monokai',
        lineNumbers: true,
        indentUnit: 4,
        lineWrapping: true,
        matchBrackets: true,
        autoCloseBrackets: true,
        viewportMargin: Infinity,
        gutters: ["CodeMirror-linenumbers"],
        readOnly: false,
        lineNumberFormatter: function(line) {
          return line;
        },
        extraKeys: {
          "Tab": function(cm) {
            cm.replaceSelection("    ", "end");
          }
        }
      });
      
      // Refresh to ensure proper rendering
      setTimeout(() => {
        editor.refresh();
      }, 100);
      
      return editor;
    };
    
    // Global variable to assign pyodide to
    let pyodideReadyPromise;
    
    // Load Pyodide
    function initializePyodide() {
      if (!pyodideReadyPromise) {
        pyodideReadyPromise = (async function() {
          // Add the Pyodide script to the page
          if (!window.loadPyodide) {
            const script = document.createElement('script');
            script.src = "https://cdn.jsdelivr.net/pyodide/v0.25.0/full/pyodide.js";
            document.head.appendChild(script);
            await new Promise(resolve => script.onload = resolve);
          }
          
          console.log("Loading Pyodide...");
          const pyodide = await window.loadPyodide();
          console.log("Pyodide loaded successfully!");
          
          // Load required packages
          console.log("Loading matplotlib and numpy...");
          await pyodide.loadPackage(["matplotlib", "numpy"]);
          console.log("Packages loaded successfully!");
          
          // Configure matplotlib to use agg backend
          await pyodide.runPythonAsync(`
            import matplotlib
            matplotlib.use('agg')
            
            # Set up functions for rendering to base64
            import matplotlib.pyplot as plt
            import io
            import base64
            
            def render_to_base64(fig=None):
                if fig is None:
                    fig = plt.gcf()
                buf = io.BytesIO()
                fig.savefig(buf, format='png', dpi=100, bbox_inches='tight')
                buf.seek(0)
                img_str = base64.b64encode(buf.getvalue()).decode('utf-8')
                return f"data:image/png;base64,{img_str}"
          `);
          
          return pyodide;
        })();
      }
      return pyodideReadyPromise;
    }

    // Initialize components when ready
    async function initializeComponents() {
      // Wait for scripts to load first
      await loadScripts();
      
      // Initialize each PyodideEmbed container
      const containers = document.querySelectorAll('.pyodide-embed');
      
      containers.forEach((container) => {
        const componentId = container.dataset.componentId;
        // Initialize CodeMirror for this container
        const editor = initCodeMirror(container, componentId);
        
        // Store the animation state for this container
        const instanceState = {
          animationFrameId: null,
          animationPaused: false,
          editor: editor
        };
        
        // Get the elements for this container
        const runButton = container.querySelector('.run-button');
        const pauseButton = container.querySelector('.pause-button');
        const resetButton = container.querySelector('.reset-button');
        const output = container.querySelector('.output-text');
        const canvas = container.querySelector('.output-canvas');
        
        // Start loading Pyodide
        let pyodidePromise = initializePyodide();
        output.innerText = "Python environment loading...";
        
        // Setup animation controls
        pauseButton.addEventListener('click', () => {
          if (instanceState.animationPaused) {
            pauseButton.textContent = 'Pause';
            instanceState.animationPaused = false;
          } else {
            pauseButton.textContent = 'Resume';
            instanceState.animationPaused = true;
          }
        });
        
        resetButton.addEventListener('click', async () => {
          // Cancel any existing animation
          if (instanceState.animationFrameId) {
            cancelAnimationFrame(instanceState.animationFrameId);
            instanceState.animationFrameId = null;
          }
          
          // Clear the canvas
          canvas.src = '';
          
          // Reset animation state
          instanceState.animationPaused = false;
          pauseButton.textContent = 'Pause';
          
          // Disable animation controls
          pauseButton.disabled = true;
          resetButton.disabled = true;
          
          // Re-enable run button
          runButton.disabled = false;
          
          output.innerText = "Animation reset. Click 'Run Animation' to start again.";
        });
        
        // Set up the run button
        runButton.addEventListener('click', async () => {
          // Start by disabling the run button and enabling animation controls
          runButton.disabled = true;
          pauseButton.disabled = false;
          resetButton.disabled = false;
          
          output.innerText = "Running...";
          
          try {
            // Ensure Pyodide is loaded
            const pyodide = await pyodidePromise;
            
            // Get the code from CodeMirror
            const userCode = instanceState.editor.getValue();
            
            // Set up capturing stdout/stderr
            let capturedOutput = "";
            pyodide.setStdout({
              write: (text) => {
                capturedOutput += text;
                output.innerText = capturedOutput;
              }
            });
            
            pyodide.setStderr({
              write: (text) => {
                capturedOutput += `\nError: ${text}`;
                output.innerText = capturedOutput;
              }
            });
            
            // Add canvas binding helper with the specific canvas ID for this instance
            await pyodide.runPythonAsync(`
              import matplotlib.pyplot as plt
              from js import document
              
              # Get the output image element for this specific instance
              canvas = document.getElementById('outputCanvas_${componentId}')
              
              # Helper function to update the canvas with matplotlib figure
              def update_canvas(fig=None):
                  if fig is None:
                      fig = plt.gcf()
                  # Render figure to base64 PNG and update image src
                  img_data = render_to_base64(fig)
                  canvas.src = img_data
                  
              # Create animation helpers
              class AnimationHelper:
                  def __init__(self):
                      self.frame = 0
                      self.max_frames = 100
                      self.is_initialized = False
                      self.is_running = False
                      
                  def setup(self):
                      # Override in user code
                      pass
                      
                  def update(self, frame):
                      # Override in user code
                      pass
                      
                  def cleanup(self):
                      # Override in user code
                      pass
              
              # Default animation helper
              animation = AnimationHelper()
            `);
            
            // Execute the user code
            capturedOutput = "";
            await pyodide.runPythonAsync(userCode);
            
            // Start the animation loop
            await pyodide.runPythonAsync(`
              # Initialize the animation
              if hasattr(animation, 'setup'):
                  animation.setup()
                  animation.is_initialized = True
              
              # Update function will be called from JS
              def animation_step(frame):
                  if hasattr(animation, 'update'):
                      try:
                          animation.update(frame)
                          update_canvas()
                          return True
                      except Exception as e:
                          print(f"Error in animation frame {frame}: {e}")
                          return False
                  return False
              
              animation.is_running = True
            `);
            
            // Set up JS animation loop
            let frame = 0;
            const pyodideGlobal = pyodide.globals.get('animation_step');
            
            function animationLoop() {
              if (!instanceState.animationPaused) {
                try {
                  // Call the Python animation step function
                  const result = pyodideGlobal(frame);
                  
                  // Check if animation should continue
                  const shouldContinue = typeof result.toJs === 'function' ? result.toJs() : result;
                  
                  if (!shouldContinue) {
                    // Animation is complete or errored
                    cancelAnimationFrame(instanceState.animationFrameId);
                    instanceState.animationFrameId = null;
                    output.innerText += "\nAnimation complete.";
                    return;
                  }
                  frame++;
                } catch (error) {
                  output.innerHTML += `\n<span class="error">Error in animation: ${error.message}</span>`;
                  cancelAnimationFrame(instanceState.animationFrameId);
                  instanceState.animationFrameId = null;
                  return;
                }
              }
              instanceState.animationFrameId = requestAnimationFrame(animationLoop);
            }
            
            // Start the animation
            instanceState.animationFrameId = requestAnimationFrame(animationLoop);
            output.innerText = "Animation running...";
            
          } catch (error) {
            output.innerHTML = `<span class="error">Error: ${error.message || String(error)}</span>`;
            console.error("Python execution error:", error);
            
            // Re-enable the run button and disable animation controls
            runButton.disabled = false;
            pauseButton.disabled = true;
            resetButton.disabled = true;
          }
        });
        
        // Check if Pyodide is already loaded when visible
        const observer = new IntersectionObserver((entries) => {
          if (entries[0].isIntersecting) {
            pyodidePromise.then(() => {
              output.innerText = "Python environment ready. Click 'Run Animation' to execute.";
            }).catch(error => {
              output.innerText = `Error loading Python: ${error.message}`;
              console.error("Failed to load Pyodide:", error);
            });
            observer.disconnect();
          }
        });
        
        observer.observe(container);
      });
    }

    // Initialize when DOM is loaded
    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", initializeComponents);
    } else {
      initializeComponents();
    }
    
    // Also initialize when window fully loads (backup)
    window.addEventListener("load", initializeComponents);
  })();
</script> 